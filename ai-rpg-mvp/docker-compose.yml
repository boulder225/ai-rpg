version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: ai-rpg-postgres
    environment:
      POSTGRES_USER: rpguser
      POSTGRES_PASSWORD: rpgpass
      POSTGRES_DB: rpgdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rpguser -d rpgdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rpg-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ai-rpg-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - rpg-network

  # AI RPG Context Tracker
  ai-rpg:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-rpg-context-tracker
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_URL=postgres://rpguser:rpgpass@postgres:5432/rpgdb?sslmode=disable
      - REDIS_URL=redis:6379
      - LOG_LEVEL=debug
      - PORT=8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rpg-network
    restart: unless-stopped

  # Adminer for database management (development only)
  adminer:
    image: adminer:latest
    container_name: ai-rpg-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - rpg-network
    profiles:
      - dev

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-rpg-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - rpg-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-rpg-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - rpg-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  rpg-network:
    driver: bridge
